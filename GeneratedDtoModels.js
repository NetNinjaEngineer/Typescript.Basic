"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiException = exports.TokenRequestModel = exports.RegisterModel = exports.ProblemDetails = exports.PointOfInterestForUpdateDto = exports.PointOfInterestForCreationDto = exports.PointOfInterestDto = exports.PointOfInterest = exports.OperationType = exports.Operation = exports.CityForUpdateDto = exports.CityForCreationDto = exports.City = exports.AuthModel = exports.Client = void 0;
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
class Client {
    constructor(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : "";
    }
    /**
     * @param body (optional)
     * @return Success
     */
    register(body) {
        let url_ = this.baseUrl + "/api/v1/Auth/Register";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processRegister(_response);
        });
    }
    processRegister(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AuthModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    login(body) {
        let url_ = this.baseUrl + "/api/v1/Auth/Login";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLogin(_response);
        });
    }
    processLogin(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AuthModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Success
     */
    logout() {
        let url_ = this.baseUrl + "/api/v1/Auth/Logout";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processLogout(_response);
        });
    }
    processLogout(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    createCityCollection(body) {
        let url_ = this.baseUrl + "/api/v1/Cities/CreateCityCollection";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateCityCollection(_response);
        });
    }
    processCreateCityCollection(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = City.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param fields (optional)
     * @return Success
     */
    getCities(fields) {
        let url_ = this.baseUrl + "/api/v1/Cities?";
        if (fields === null)
            throw new Error("The parameter 'fields' cannot be null.");
        else if (fields !== undefined)
            url_ += "fields=" + encodeURIComponent("" + fields) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetCities(_response);
        });
    }
    processGetCities(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = City.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param fields (optional)
     * @return Success
     */
    citiesHEAD(fields) {
        let url_ = this.baseUrl + "/api/v1/Cities?";
        if (fields === null)
            throw new Error("The parameter 'fields' cannot be null.");
        else if (fields !== undefined)
            url_ += "fields=" + encodeURIComponent("" + fields) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "HEAD",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCitiesHEAD(_response);
        });
    }
    processCitiesHEAD(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = City.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return Created
     */
    createCity(body) {
        let url_ = this.baseUrl + "/api/v1/Cities";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreateCity(_response);
        });
    }
    processCreateCity(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    citiesOPTIONS() {
        let url_ = this.baseUrl + "/api/v1/Cities";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "OPTIONS",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCitiesOPTIONS(_response);
        });
    }
    processCitiesOPTIONS(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get an city by cityId and fields
     * @param cityId Id for city that you want to get.
     * @param fields (optional) this parameter used to retrieve city by specified fields
     * @return Success
     */
    getCity(cityId, fields) {
        let url_ = this.baseUrl + "/api/v1/Cities/{cityId}?";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        if (fields === null)
            throw new Error("The parameter 'fields' cannot be null.");
        else if (fields !== undefined)
            url_ += "fields=" + encodeURIComponent("" + fields) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetCity(_response);
        });
    }
    processGetCity(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = City.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return No Content
     */
    updateCity(cityId, body) {
        let url_ = this.baseUrl + "/api/v1/Cities/{cityId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUpdateCity(_response);
        });
    }
    processUpdateCity(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return No Content
     */
    deleteCity(cityId) {
        let url_ = this.baseUrl + "/api/v1/Cities/{cityId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteCity(_response);
        });
    }
    processDeleteCity(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param searchTerm (optional)
     * @param filterTerm (optional)
     * @param pageNumber (optional)
     * @param pageSize (optional)
     * @param fields (optional)
     * @param sort (optional)
     * @return Success
     */
    getCitiesByCityParamaters(searchTerm, filterTerm, pageNumber, pageSize, fields, sort) {
        let url_ = this.baseUrl + "/api/v1/Cities/GetCitiesByCityParamaters?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (filterTerm === null)
            throw new Error("The parameter 'filterTerm' cannot be null.");
        else if (filterTerm !== undefined)
            url_ += "FilterTerm=" + encodeURIComponent("" + filterTerm) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (fields === null)
            throw new Error("The parameter 'fields' cannot be null.");
        else if (fields !== undefined)
            url_ += "Fields=" + encodeURIComponent("" + fields) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetCitiesByCityParamaters(_response);
        });
    }
    processGetCitiesByCityParamaters(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Success
     */
    getPointsOfInterest(cityId) {
        let url_ = this.baseUrl + "/api/v1/cities/{cityId}/pointsofinterest";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetPointsOfInterest(_response);
        });
    }
    processGetPointsOfInterest(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PointOfInterestDto.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return Created
     */
    createPointOfInterest(cityId, body) {
        let url_ = this.baseUrl + "/api/v1/cities/{cityId}/pointsofinterest";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreatePointOfInterest(_response);
        });
    }
    processCreatePointOfInterest(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return Success
     */
    getPointOfInterest(cityId, pointOfInterestId) {
        let url_ = this.baseUrl + "/api/v1/cities/{cityId}/pointsofinterest/{pointOfInterestId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        if (pointOfInterestId === undefined || pointOfInterestId === null)
            throw new Error("The parameter 'pointOfInterestId' must be defined.");
        url_ = url_.replace("{pointOfInterestId}", encodeURIComponent("" + pointOfInterestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetPointOfInterest(_response);
        });
    }
    processGetPointOfInterest(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PointOfInterestDto.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return No Content
     */
    pointsofinterestPUT(cityId, pointOfInterestId, body) {
        let url_ = this.baseUrl + "/api/v1/cities/{cityId}/pointsofinterest/{pointOfInterestId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        if (pointOfInterestId === undefined || pointOfInterestId === null)
            throw new Error("The parameter 'pointOfInterestId' must be defined.");
        url_ = url_.replace("{pointOfInterestId}", encodeURIComponent("" + pointOfInterestId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPointsofinterestPUT(_response);
        });
    }
    processPointsofinterestPUT(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return No Content
     */
    pointsofinterestPATCH(cityId, pointOfInterestId, body) {
        let url_ = this.baseUrl + "/api/v1/cities/{cityId}/pointsofinterest/{pointOfInterestId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        if (pointOfInterestId === undefined || pointOfInterestId === null)
            throw new Error("The parameter 'pointOfInterestId' must be defined.");
        url_ = url_.replace("{pointOfInterestId}", encodeURIComponent("" + pointOfInterestId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPointsofinterestPATCH(_response);
        });
    }
    processPointsofinterestPATCH(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * @return No Content
     */
    pointsofinterestDELETE(cityId, pointOfInterestId) {
        let url_ = this.baseUrl + "/api/v1/cities/{cityId}/pointsofinterest/{pointOfInterestId}";
        if (cityId === undefined || cityId === null)
            throw new Error("The parameter 'cityId' must be defined.");
        url_ = url_.replace("{cityId}", encodeURIComponent("" + cityId));
        if (pointOfInterestId === undefined || pointOfInterestId === null)
            throw new Error("The parameter 'pointOfInterestId' must be defined.");
        url_ = url_.replace("{pointOfInterestId}", encodeURIComponent("" + pointOfInterestId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPointsofinterestDELETE(_response);
        });
    }
    processPointsofinterestDELETE(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 406) {
            return response.text().then((_responseText) => {
                let result406 = null;
                let resultData406 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result406 = ProblemDetails.fromJS(resultData406);
                return throwException("Not Acceptable", status, _responseText, _headers, result406);
            });
        }
        else if (status === 500) {
            return response.text().then((_responseText) => {
                return throwException("Server Error", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
exports.Client = Client;
class AuthModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.message = _data["message"];
            this.token = _data["token"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [];
                for (let item of _data["roles"])
                    this.roles.push(item);
            }
            this.isAuthenticated = _data["isAuthenticated"];
            this.expiresOn = _data["expiresOn"] ? new Date(_data["expiresOn"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AuthModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["token"] = this.token;
        data["userName"] = this.userName;
        data["email"] = this.email;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["isAuthenticated"] = this.isAuthenticated;
        data["expiresOn"] = this.expiresOn ? this.expiresOn.toISOString() : undefined;
        return data;
    }
}
exports.AuthModel = AuthModel;
/** City with id, name, country, population, latitude and longitude fields. */
class City {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.country = _data["country"];
            this.population = _data["population"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            if (Array.isArray(_data["pointOfInterests"])) {
                this.pointOfInterests = [];
                for (let item of _data["pointOfInterests"])
                    this.pointOfInterests.push(PointOfInterest.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["country"] = this.country;
        data["population"] = this.population;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        if (Array.isArray(this.pointOfInterests)) {
            data["pointOfInterests"] = [];
            for (let item of this.pointOfInterests)
                data["pointOfInterests"].push(item.toJSON());
        }
        return data;
    }
}
exports.City = City;
class CityForCreationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.country = _data["country"];
            this.population = _data["population"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CityForCreationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["country"] = this.country;
        data["population"] = this.population;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}
exports.CityForCreationDto = CityForCreationDto;
class CityForUpdateDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.country = _data["country"];
            this.population = _data["population"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CityForUpdateDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["country"] = this.country;
        data["population"] = this.population;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}
exports.CityForUpdateDto = CityForUpdateDto;
class Operation {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.operationType = _data["operationType"];
            this.path = _data["path"];
            this.op = _data["op"];
            this.from = _data["from"];
            this.value = _data["value"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["operationType"] = this.operationType;
        data["path"] = this.path;
        data["op"] = this.op;
        data["from"] = this.from;
        data["value"] = this.value;
        return data;
    }
}
exports.Operation = Operation;
var OperationType;
(function (OperationType) {
    OperationType[OperationType["_0"] = 0] = "_0";
    OperationType[OperationType["_1"] = 1] = "_1";
    OperationType[OperationType["_2"] = 2] = "_2";
    OperationType[OperationType["_3"] = 3] = "_3";
    OperationType[OperationType["_4"] = 4] = "_4";
    OperationType[OperationType["_5"] = 5] = "_5";
    OperationType[OperationType["_6"] = 6] = "_6";
})(OperationType || (exports.OperationType = OperationType = {}));
class PointOfInterest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.category = _data["category"];
            this.description = _data["description"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : undefined;
            this.cityId = _data["cityId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointOfInterest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["category"] = this.category;
        data["description"] = this.description;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["city"] = this.city ? this.city.toJSON() : undefined;
        data["cityId"] = this.cityId;
        return data;
    }
}
exports.PointOfInterest = PointOfInterest;
class PointOfInterestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.category = _data["category"];
            this.description = _data["description"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.cityId = _data["cityId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointOfInterestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["category"] = this.category;
        data["description"] = this.description;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["cityId"] = this.cityId;
        return data;
    }
}
exports.PointOfInterestDto = PointOfInterestDto;
class PointOfInterestForCreationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.category = _data["category"];
            this.description = _data["description"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointOfInterestForCreationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["category"] = this.category;
        data["description"] = this.description;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}
exports.PointOfInterestForCreationDto = PointOfInterestForCreationDto;
class PointOfInterestForUpdateDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.category = _data["category"];
            this.description = _data["description"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PointOfInterestForUpdateDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["category"] = this.category;
        data["description"] = this.description;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}
exports.PointOfInterestForUpdateDto = PointOfInterestForUpdateDto;
class ProblemDetails {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}
exports.ProblemDetails = ProblemDetails;
class RegisterModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : undefined;
            this.password = _data["password"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["email"] = this.email;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["password"] = this.password;
        return data;
    }
}
exports.RegisterModel = RegisterModel;
class TokenRequestModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TokenRequestModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}
exports.TokenRequestModel = TokenRequestModel;
class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=GeneratedDtoModels.js.map